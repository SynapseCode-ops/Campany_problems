
class Solution {
public:
    vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    int orangesRotting(vector<vector<int>>& grid) {
        int time = 0;
        int fo = 0;
        int rows = grid.size();
        int cols = grid[0].size();
        queue<pair<int, int>> q;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 2)
                    q.push({i, j});
                if (grid[i][j] == 1)
                    fo++;
            }
        }

        while (q.size()) {
            int size = q.size();
            for (int k = 0; k < size; k++) {
                auto ele = q.front();
                q.pop();
                int i = ele.first;
                int j = ele.second;

                for (int d = 0; d < 4; d++) {
                    int r = i + dir[d][0];
                    int c = j + dir[d][1];
                    if (r < 0 || r >= rows || c < 0 || c >= cols)
                        continue;
                    if (grid[r][c] == 2 || grid[r][c] == 0)
                        continue;
                    grid[r][c] = 2;
                    fo--;
                    q.push({r, c});
                }
            }
            if(q.size() > 0) time++;
        }
        return (fo)?-1:time;
    }
};
